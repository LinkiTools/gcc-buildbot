# -*- python -*-
# ex: set syntax=python:

#from gdbbuilder import make_gdb_builder
from gdbbuilder import load_config
from sumfiles import DejaResults, set_web_base
import os.path
import urllib

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.

# Base directory for the web server.
gdb_web_base = os.path.expanduser(os.path.join(basedir, 'public_html', 
                                               'results'))
set_web_base (gdb_web_base)

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
	repourl = 'git://sourceware.org/git/binutils-gdb.git',
	workdir = '/home/buildbot/buildbot-master-binutils-gdb',
	branches= [ 'master' ],
	pollinterval=30))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler, AnyBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand

#factory = BuildFactory()
# check out the source
#factory.addStep(Git(repourl='git://github.com/buildbot/pyflakes.git', mode='incremental'))
# run the tests (note that this will require that 'trial' is installed)
#factory.addStep(ShellCommand(command=["trial", "pyflakes"]))

from buildbot.config import BuilderConfig

#c['builders'] = all_gdb_builders
#c['builders'] = []
#c['builders'].append(
#    BuilderConfig(name="runtests",
#      slavenames=["example-slave"],
#      factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

# Catch things like PR gdb/42, PR16, PR 16 or bug #11,
# and turn them into gdb bugzilla URLs.
cc_re_tuple = (r'(PR [a-z]+/|PR ?|#)(\d+)',
	       r'http://sourceware.org/bugzilla/show_bug.cgi?id=\2')

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
#    auth=auth.BasicAuth([("t","t")]),
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = True,  # ..or this
    pingBuilder = False,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

#c['status'].append(html.WebStatus(http_port=8010,
#				  forceBuild = True,
#				  allowForce=False,
#				  order_console_by_time=True,
#				  changecommentlink=cc_re_tuple))

#from buildbot.status import words
#c['status'].append(words.IRC(host="irc.yyz.redhat.com", nick="sdj-gdbbot",
#			     channels=["#gdbbuild"]))

#from buildbot.status import mail
#mn = mail.MailNotifier(fromaddr="sergiodj@redhat.com",
#                       sendToInterestedUsers=False,
#                       extraRecipients=['gdb-testers@sourceware.org'],
#                       relayhost="smtp.corp.redhat.com",
#                       mode=('failing'),
#                       smtpPort=25)

#c['status'].append(mn)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "GDB"
c['titleURL'] = "https://gnu.org/s/gdb"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}

load_config (c)
